library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.numeric_std.all;

entity Memory is
 generic (
        AWIDTH : positive := 5;
        DWIDTH : positive := 8
    );
    port (
        clk : in std_logic;
        addr : in std_logic_vector(AWIDTH-1 downto 0);
        data_io : inout std_logic_vector(DWIDTH-1 downto 0);
        wr : in std_logic;
        rd : in std_logic
    );
end Memory;

architecture Behavioral of Memory is
type memory_type is array (0 to 2**AWIDTH-1) of std_logic_vector(DWIDTH-1 downto 0);
    signal mem : memory_type := (others => (others => '0'));
    signal data_out : std_logic_vector(DWIDTH-1 downto 0);
begin
    process (clk)
    begin
        if rising_edge(clk) then
            if wr = '1' then
                mem(to_integer(unsigned(addr))) <= data_io;
            end if;
            if rd = '1' then
                data_out <= mem(to_integer(unsigned(addr)));
            end if;
        end if;
    end process;

    data_io <= data_out when rd = '1' else (others => 'U');
end Behavioral;
